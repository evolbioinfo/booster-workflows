#!/usr/bin/env nextflow

params.datadir  = "$baseDir/results/"
params.resultDir= 'results'

/* Input files & directories */
alignmentDir = file([params.datadir,"aligns"].join(File.separator))
treeDir      = file([params.datadir,"trees"].join(File.separator))
name_map     = file([alignmentDir, "name_map.txt.gz"].join(File.separator))

/* Output directories */
resultDir    = file(params.resultDir)
outtreeDir   = file([params.resultDir, "supportstrees"].join(File.separator))

resultDir.with { mkdirs() }

outtreeDir.with { mkdirs() }


/* 1, 16x16, 256*256 */
divisionChan = Channel.from([1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256])

/* Corresponding seeds */
seedChan = Channel.from([691607951, 8183053866, 4893742101, 4077898797, 343704747, 4873405240, 5273707124, 1339632896, 3130080935, 1374534207, 6246062756, 1496776910, 8878338027, 6323448214, 3237974410, 2987189437, 6222563888, 999136595, 298170956, 907835386, 867919107, 938410850, 133955531, 10212400, 911634335, 405190210, 512739722, 899914067, 212023562, 33359075, 50269235, 316149740, 450375210, 526021390, 360524958, 309915236, 714833447, 295450890, 596005100, 798408871, 435963321, 104610141, 874637946, 740731692, 88720025, 93091561, 926761478, 65555515, 406257263, 980661693, 928531359, 490519023, 705535084, 115891987, 478479455, 857079815, 905486958, 682627787, 958082332, 416827380, 828382589, 94572953, 211968712, 937210488, 908813635, 173582474, 19729740, 769444205, 181849579, 632313299, 314635474, 49173697, 438756197, 713287555, 373176894, 849259030, 757011844, 36726750, 701708388, 718558927, 775702230, 567807168, 89261920, 518494736, 225349766, 504449470, 508050957, 973313469, 46502735, 454725055, 313445844, 635341092, 851144904, 418922266, 84832117, 849207817, 721155316, 839146388, 692352770, 828668062, 476369830, 217204213, 131582369, 991035493, 427546531, 661224550, 137284653, 110420448, 416312353, 911929898, 782276324, 581411472, 621689283, 298959787, 595610657, 791193008, 980257120, 929983766, 880516178, 560474044, 645791528, 36809869, 732594423, 971820762, 104604049, 616415785, 108924739, 90704696, 723098283, 654550380, 119279360, 804807932, 802112239, 298379574, 263431666, 774964507, 550637942, 595317080, 714234017, 661345998, 673581034, 861167084, 785368360, 831649326, 173732130, 53329833, 979388868, 764940019, 49439511, 377808072, 503715200, 510603386, 474456613, 235323880, 346585948, 990384170, 696651861, 5995641, 650119708, 134059766, 423401210, 104029252, 627695789, 899971208, 403981963, 865497865, 346821802, 849040204, 573800984, 51739847, 811772856, 991018882, 154091715, 418071399, 413656407, 520011961, 157845656, 8081362, 158047669, 410155019, 667343138, 822150692, 705482051, 893843219, 38120548, 996268646, 130692697, 185347075, 299992613, 306259321, 968752663, 550076128, 832725075, 459353671, 959910967, 37430954, 269632355, 392823732, 166485873, 973140245, 862843339, 454858158, 649349021, 533096117, 187533061, 440966524, 526417351, 717674744, 178623730, 633458993, 177897361, 959593262, 669445421, 401437524, 994328730, 702782541, 879671908, 100997127, 816116046, 954951512, 569451763, 127820826, 998746022, 749155383, 124276265, 270958216, 120834664, 725969715, 253494423, 364335179, 629431349, 13438681, 717620698, 140197071, 361316781, 916196999, 228846804, 523546204, 993591906, 850175983, 409448801, 379405299, 495529579, 73331916, 866294544, 534004794, 439518353, 736995423, 437546102, 342737613, 246667894, 898636085, 904663166, 446344056, 896870295, 817490261, 967346316, 342505245, 698137517, 411763343, 72769971, 314859382, 342651881, 565800321, 993468606, 924524179, 721317759, 508548434, 65842731, 917537618, 17307824, 321455555, 749024539])

process getFiles{
	input:
	val(div) from divisionChan
	val(seed) from seedChan

	output:
	set val(div), val(seed), file(refAlign), file(refTree), file(bootTrees) into originalFiles

	shell:
	'''
	cp !{alignmentDir}/align_!{div}_!{seed}.fa.gz refAlign
	cp !{treeDir}/ref_!{div}_!{seed}.nw.gz refTree
	cp !{treeDir}/boot_!{div}_!{seed}.nw.gz bootTrees
	'''
}

/************************/
/*                      */     
/*  Analyze Supports    */
/*                      */
/************************/
process computeSupports {
	tag "${refAlign.name} - ${div} ${seed}"

	input:
	set val(div), val(seed), file(refAlign), file(refTree), file(bootTrees) from originalFiles

	output:
	set val(div), val(seed), file("fbp.nw"), file("tbe.nw"),file("tbe.log") into supporttrees

	shell:
	'''
	gunzip -c !{bootTrees} > boot.nw
	gunzip -c !{refTree}   > ref.nw
	gunzip -c !{refAlign}  > ali.fa	

	gotree compute support classical -i ref.nw -b boot.nw -o fbp.nw  -t !{task.cpus}
	##booster -i ref.nw -b boot.nw  -o tbe.nw -s $RANDOM -@ 2 -n theoretical
	gotree compute support booster -i ref.nw -b boot.nw -l tbe.log -o tbe.nw -t !{task.cpus} --moved-taxa --dist-cutoff 0.3

	rm -f boot.nw ref.nw ali.fa
	'''
}

supporttrees.into{ supporttreescopy; supporttreesnext}
supporttreescopy.subscribe{
	div,seed,fbp,tbe,tbelog -> 
		fbp.copyTo(outtreeDir.resolve(div+"_"+seed+"_"+fbp.name));
		tbe.copyTo(outtreeDir.resolve(div+"_"+seed+"_"+tbe.name));
		tbelog.copyTo(outtreeDir.resolve(div+"_"+seed+"_"+tbelog.name));
}

process analyzeSupports {
	tag "${div} ${seed}"

	input:
	set val(div), val(seed), file(fbp), file(tbe),file(tbelog) from supporttreesnext

	output:
	set val(div), val(seed), file("supports.txt") into supportstats
	
	shell:
	'''
	gotree stats edges -i !{tbe} | awk '{if($4 != "N/A" && NR>1){print "!{div}\t!{seed}\tnot_collapsed\tTBE\t" $4 "\t" $7}}' > supports.txt
	gotree stats edges -i !{fbp} | awk '{if($4 != "N/A" && NR>1){print "!{div}\t!{seed}\tnot_collapsed\tFBP\t" $4 "\t" $7}}' >> supports.txt
	'''
}

supportstats.map{
	div, seed, supports -> supports
}.collectFile(name: 'allsupports.txt').subscribe{
	file -> file.copyTo(resultDir.resolve(file.name))
}
